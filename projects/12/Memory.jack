// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
      let memory = 0;
      let freeList = 2048;
      let freeList[0] = 14436;
      let freeList[1] = null;
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let memory[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var Array free, prev, block;

      if (size = 0) {
        let size = 1;
      }

      let free = freeList;
      let prev = null;

      while (free[0] < (size + 2)) {
        if (free[1] = null) {
          // error: not enough memory
          return null;
        }

        let prev = free;
        let free = free[1];
      }

      let block = free;
      let free = free + size + 1;
      let free[0] = block[0] - size - 1;
      let free[1] = block[1];
      let block[0] = size + 1;

      if (free > 16383) {
        if (prev = null) {
          let freeList = null;
        } else {
          let prev[1] = null;
        }
      } else {
        if (prev = null) {
          let freeList = free;
        } else {
          let prev[1] = free;
        }
      }

      return block + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array free, prev, block;

      let block = o - 1;

      if (freeList = null) {
        let freeList = block;
        let freeList[1] = null;
        return;
      }

      let free = freeList;
      let prev = null;

      while ((free < block) & ~(free = null)) {
        let prev = free;
        let free = free[1];
      }

      if (block + block[0] = free) {
        let block[0] = block[0] + free[0];
        let block[1] = free[1];
      } else {
        let block[1] = free;
      }

      if (prev = null) {
        let freeList = block;
        return;
      }

      if (prev + prev[0] = block) {
        let prev[0] = prev[0] + block[0];
        let prev[1] = block[1];
      } else {
        let prev[1] = block;
      }

      return;
    }    
}
