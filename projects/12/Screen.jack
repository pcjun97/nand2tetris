// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
      var int i, j;

      let color = true;
      let twoToThe = Array.new(16);

      let i = 0;
      let j = 1;
      while (i < 16) {
        let twoToThe[i] = j;
        let j = j + j;
        let i = i + 1;
      }

      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int i;
      let i = 16384;
      while (i < 24576) {
        do Memory.poke(i, 0);
        let i = i + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int addr, val, mask, col;

      let col = x / 16;
      let addr = 16384 + (y * 32) + col;
      let val = Memory.peek(addr);
      let mask = twoToThe[x - (col * 16)];

      if (color) {
        do Memory.poke(addr, val | mask);
      } else {
        do Memory.poke(addr, val & ~mask);
      }

      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int a, b, x, y, dx, dy, diff;

      let dx = Math.abs(x2 - x1);
      let dy = Math.abs(y2 - y1);
      let a = 0;
      let b = 0;

      if (dy = 0) {
        let x = Math.min(x1, x2);
        while (a < (dx + 1)) {
          do Screen.drawPixel(x + a, y1);
          let a = a + 1;
        }
        return;
      }

      if (dx = 0) {
        let y = Math.min(y1, y2);
        while (b < (dy + 1)) {
          do Screen.drawPixel(x1, y + b);
          let b = b + 1;
        }
        return;
      }

      let diff = 0;

      while ((a < dx) & (b < dy)) {
        if (x1 < x2) {
          let x = x1 + a;
        } else {
          let x = x1 - a;
        }

        if (y1 < y2) {
          let y = y1 + b;
        } else {
          let y = y1 - b;
        }

        do Screen.drawPixel(x, y);

        if (diff < 0) {
          let a = a + 1;
          let diff = diff + dy;
        } else {
          let b = b + 1;
          let diff = diff - dx;
        }
      }

      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int y;

      let y = y1;
      while (y < (y2 + 1)) {
        do Screen.drawLine(x1, y, x2, y);
        let y = y + 1;
      }

      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dy, a, b;

      if ((r < 0) | (r > 181)) {
        return;
      }

      let dy = -r;
      while (dy < (r + 1)) {
        let a = Math.sqrt((r * r) - (dy * dy));
        let b = y + dy;
        do Screen.drawLine(x - a, b, x + a, b);
        let dy = dy + 1;
      }

      return;
    }
}
