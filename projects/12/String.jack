// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array arr;
    field int i;
    field int max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (maxLength = 0) {
        let maxLength = 1;
      }
      let arr = Array.new(maxLength);
      let i = 0;
      let max = maxLength;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do arr.dispose();
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return i;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      if (j < i) {
        return arr[j];
      }
      return null;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let arr[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      var Array tmp;
      var int j;

      if (i = max) {
        let max = max + max;
        let tmp = Array.new(max);
        let j = 0;

        while (j < i) {
          let tmp[i] = arr[i];
          let j = j + 1;
        }

        do arr.dispose();
        let arr = tmp;
      }

      let arr[i] = c;
      let i = i + 1;

      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let i = i - 1;
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int sum, j;
      var boolean neg;

      if (i = 0) {
        return 0;
      }

      let sum = 0;
      let j = 0;
      let neg = false;

      if (arr[0] = 45) {
        let neg = true;
        let j = 1;
      }

      while ((j < i) & (arr[j] > 47) & (arr[j] < 58)) {
        let sum = (sum * 10) + (arr[j] - 48);
        let j = j + 1;
      }

      if (neg) {
        return -sum;
      }

      return sum;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int j, digit;
      let i = 0;

      if (val = 0) {
        do appendChar(48);
        return;
      }

      if (val < 0) {
        do appendChar(45);
        let val = Math.abs(val);
      }

      let j = 10000;

      while (j > 0) {
        let digit = val / j;

        if (digit > 0) {
          let val = val - (digit * j);
        }

        let j = j / 10;

        if ((digit > 0) | ~(intValue() = 0)) {
          do appendChar(48 + digit);
        }
      }

      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
